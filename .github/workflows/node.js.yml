# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Build and Release

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [14.x]

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - name: Setup cache for npm
      id: npm_cache
      uses: actions/cache@v2
      with:
        path: |
          ~/.npm
          ~/cache
          !~/cache/exclude
          **/node_modules
        key: yarn-${{ matrix.node-version }}-${{ hashFiles('**/yarn.lock') }}
    - name: yarn install
      if: steps.npm_cache.outputs.cache-hit != 'true'
      run: yarn install --frozen-lockfile
    - run: yarn test

  publish:
    if: ${{ contains(github.ref, 'refs/tags') }}
    needs: build
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [14.x]

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - name: Setup cache for npm
      id: npm_cache
      uses: actions/cache@v2
      with:
        path: |
          ~/.npm
          ~/cache
          !~/cache/exclude
          **/node_modules
        key: yarn-${{ matrix.node-version }}-${{ hashFiles('**/yarn.lock') }}
    - name: yarn install
      if: steps.npm_cache.outputs.cache-hit != 'true'
      run: yarn install --frozen-lockfile
    - name: Publish to Node Packages
      run: yarn publish
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
    - run: ./scripts/dist
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: ${{ github.ref }}
        release_name: ${{ github.ref }}
        body: |
          Release ${{ github.ref }}
        draft: false
        prerelease: false
    - name: Upload Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
        asset_path: innoq-styleguide-${{ github.run_number }}.zip
        asset_name: innoq-styleguide-${{ github.run_number }}.zip
        asset_content_type: application/zip

    - name: Slack Notification
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
